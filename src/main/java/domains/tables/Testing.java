/*
 * This file is generated by jOOQ.
 */
package domains.tables;


import domains.DefaultSchema;
import domains.Keys;
import domains.tables.records.TestingRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Testing extends TableImpl<TestingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Testing</code>
     */
    public static final Testing TESTING = new Testing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestingRecord> getRecordType() {
        return TestingRecord.class;
    }

    /**
     * The column <code>Testing.testing_id</code>.
     */
    public final TableField<TestingRecord, Integer> TESTING_ID = createField(DSL.name("testing_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Testing.employee</code>.
     */
    public final TableField<TestingRecord, Integer> EMPLOYEE = createField(DSL.name("employee"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Testing.test</code>.
     */
    public final TableField<TestingRecord, Integer> TEST = createField(DSL.name("test"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Testing.date</code>.
     */
    public final TableField<TestingRecord, Integer> DATE = createField(DSL.name("date"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Testing.number</code>.
     */
    public final TableField<TestingRecord, Integer> NUMBER = createField(DSL.name("number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Testing.attempt</code>.
     */
    public final TableField<TestingRecord, Integer> ATTEMPT = createField(DSL.name("attempt"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    private Testing(Name alias, Table<TestingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Testing(Name alias, Table<TestingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Testing</code> table reference
     */
    public Testing(String alias) {
        this(DSL.name(alias), TESTING);
    }

    /**
     * Create an aliased <code>Testing</code> table reference
     */
    public Testing(Name alias) {
        this(alias, TESTING);
    }

    /**
     * Create a <code>Testing</code> table reference
     */
    public Testing() {
        this(DSL.name("Testing"), null);
    }

    public <O extends Record> Testing(Table<O> child, ForeignKey<O, TestingRecord> key) {
        super(child, key, TESTING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TestingRecord, Integer> getIdentity() {
        return (Identity<TestingRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestingRecord> getPrimaryKey() {
        return Keys.TESTING__;
    }

    @Override
    public Testing as(String alias) {
        return new Testing(DSL.name(alias), this);
    }

    @Override
    public Testing as(Name alias) {
        return new Testing(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Testing rename(String name) {
        return new Testing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Testing rename(Name name) {
        return new Testing(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
