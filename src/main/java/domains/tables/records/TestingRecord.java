/*
 * This file is generated by jOOQ.
 */
package domains.tables.records;


import domains.tables.Testing;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestingRecord extends UpdatableRecordImpl<TestingRecord> implements Record6<Integer, Integer, Integer, Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>Testing.testing_id</code>.
     */
    public void setTestingId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>Testing.testing_id</code>.
     */
    public Integer getTestingId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>Testing.employee</code>.
     */
    public void setEmployee(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>Testing.employee</code>.
     */
    public Integer getEmployee() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>Testing.test</code>.
     */
    public void setTest(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>Testing.test</code>.
     */
    public Integer getTest() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>Testing.date</code>.
     */
    public void setDate(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>Testing.date</code>.
     */
    public Integer getDate() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>Testing.number</code>.
     */
    public void setNumber(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>Testing.number</code>.
     */
    public Integer getNumber() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>Testing.attempt</code>.
     */
    public void setAttempt(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>Testing.attempt</code>.
     */
    public Integer getAttempt() {
        return (Integer) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, Integer, Integer, Integer, Integer, Integer> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Testing.TESTING.TESTING_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Testing.TESTING.EMPLOYEE;
    }

    @Override
    public Field<Integer> field3() {
        return Testing.TESTING.TEST;
    }

    @Override
    public Field<Integer> field4() {
        return Testing.TESTING.DATE;
    }

    @Override
    public Field<Integer> field5() {
        return Testing.TESTING.NUMBER;
    }

    @Override
    public Field<Integer> field6() {
        return Testing.TESTING.ATTEMPT;
    }

    @Override
    public Integer component1() {
        return getTestingId();
    }

    @Override
    public Integer component2() {
        return getEmployee();
    }

    @Override
    public Integer component3() {
        return getTest();
    }

    @Override
    public Integer component4() {
        return getDate();
    }

    @Override
    public Integer component5() {
        return getNumber();
    }

    @Override
    public Integer component6() {
        return getAttempt();
    }

    @Override
    public Integer value1() {
        return getTestingId();
    }

    @Override
    public Integer value2() {
        return getEmployee();
    }

    @Override
    public Integer value3() {
        return getTest();
    }

    @Override
    public Integer value4() {
        return getDate();
    }

    @Override
    public Integer value5() {
        return getNumber();
    }

    @Override
    public Integer value6() {
        return getAttempt();
    }

    @Override
    public TestingRecord value1(Integer value) {
        setTestingId(value);
        return this;
    }

    @Override
    public TestingRecord value2(Integer value) {
        setEmployee(value);
        return this;
    }

    @Override
    public TestingRecord value3(Integer value) {
        setTest(value);
        return this;
    }

    @Override
    public TestingRecord value4(Integer value) {
        setDate(value);
        return this;
    }

    @Override
    public TestingRecord value5(Integer value) {
        setNumber(value);
        return this;
    }

    @Override
    public TestingRecord value6(Integer value) {
        setAttempt(value);
        return this;
    }

    @Override
    public TestingRecord values(Integer value1, Integer value2, Integer value3, Integer value4, Integer value5, Integer value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestingRecord
     */
    public TestingRecord() {
        super(Testing.TESTING);
    }

    /**
     * Create a detached, initialised TestingRecord
     */
    public TestingRecord(Integer testingId, Integer employee, Integer test, Integer date, Integer number, Integer attempt) {
        super(Testing.TESTING);

        setTestingId(testingId);
        setEmployee(employee);
        setTest(test);
        setDate(date);
        setNumber(number);
        setAttempt(attempt);
    }
}
