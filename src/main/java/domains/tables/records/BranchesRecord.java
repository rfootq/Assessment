/*
 * This file is generated by jOOQ.
 */
package domains.tables.records;


import domains.tables.Branches;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BranchesRecord extends UpdatableRecordImpl<BranchesRecord> implements Record4<Integer, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>Branches.Branch_id</code>.
     */
    public void setBranchId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>Branches.Branch_id</code>.
     */
    public Integer getBranchId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>Branches.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>Branches.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>Branches.address</code>.
     */
    public void setAddress(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>Branches.address</code>.
     */
    public String getAddress() {
        return (String) get(2);
    }

    /**
     * Setter for <code>Branches.organization_id</code>.
     */
    public void setOrganizationId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>Branches.organization_id</code>.
     */
    public Integer getOrganizationId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Branches.BRANCHES.BRANCH_ID;
    }

    @Override
    public Field<String> field2() {
        return Branches.BRANCHES.NAME;
    }

    @Override
    public Field<String> field3() {
        return Branches.BRANCHES.ADDRESS;
    }

    @Override
    public Field<Integer> field4() {
        return Branches.BRANCHES.ORGANIZATION_ID;
    }

    @Override
    public Integer component1() {
        return getBranchId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getAddress();
    }

    @Override
    public Integer component4() {
        return getOrganizationId();
    }

    @Override
    public Integer value1() {
        return getBranchId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getAddress();
    }

    @Override
    public Integer value4() {
        return getOrganizationId();
    }

    @Override
    public BranchesRecord value1(Integer value) {
        setBranchId(value);
        return this;
    }

    @Override
    public BranchesRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public BranchesRecord value3(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public BranchesRecord value4(Integer value) {
        setOrganizationId(value);
        return this;
    }

    @Override
    public BranchesRecord values(Integer value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BranchesRecord
     */
    public BranchesRecord() {
        super(Branches.BRANCHES);
    }

    /**
     * Create a detached, initialised BranchesRecord
     */
    public BranchesRecord(Integer branchId, String name, String address, Integer organizationId) {
        super(Branches.BRANCHES);

        setBranchId(branchId);
        setName(name);
        setAddress(address);
        setOrganizationId(organizationId);
    }
}
