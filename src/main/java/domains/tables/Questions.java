/*
 * This file is generated by jOOQ.
 */
package domains.tables;


import domains.DefaultSchema;
import domains.Keys;
import domains.tables.records.QuestionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Questions extends TableImpl<QuestionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Questions</code>
     */
    public static final Questions QUESTIONS = new Questions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionsRecord> getRecordType() {
        return QuestionsRecord.class;
    }

    /**
     * The column <code>Questions.question_id</code>.
     */
    public final TableField<QuestionsRecord, Integer> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Questions.test</code>.
     */
    public final TableField<QuestionsRecord, Integer> TEST = createField(DSL.name("test"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Questions.question</code>.
     */
    public final TableField<QuestionsRecord, String> QUESTION = createField(DSL.name("question"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Questions.answers</code>.
     */
    public final TableField<QuestionsRecord, Integer> ANSWERS = createField(DSL.name("answers"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Questions.cost</code>.
     */
    public final TableField<QuestionsRecord, Integer> COST = createField(DSL.name("cost"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    private Questions(Name alias, Table<QuestionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Questions(Name alias, Table<QuestionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Questions</code> table reference
     */
    public Questions(String alias) {
        this(DSL.name(alias), QUESTIONS);
    }

    /**
     * Create an aliased <code>Questions</code> table reference
     */
    public Questions(Name alias) {
        this(alias, QUESTIONS);
    }

    /**
     * Create a <code>Questions</code> table reference
     */
    public Questions() {
        this(DSL.name("Questions"), null);
    }

    public <O extends Record> Questions(Table<O> child, ForeignKey<O, QuestionsRecord> key) {
        super(child, key, QUESTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<QuestionsRecord> getPrimaryKey() {
        return Keys.QUESTIONS__QUESTIONS_PK;
    }

    @Override
    public Questions as(String alias) {
        return new Questions(DSL.name(alias), this);
    }

    @Override
    public Questions as(Name alias) {
        return new Questions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Questions rename(String name) {
        return new Questions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Questions rename(Name name) {
        return new Questions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
