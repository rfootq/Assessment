/*
 * This file is generated by jOOQ.
 */
package domains.tables;


import domains.DefaultSchema;
import domains.Indexes;
import domains.Keys;
import domains.tables.records.TestsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tests extends TableImpl<TestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Tests</code>
     */
    public static final Tests TESTS = new Tests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestsRecord> getRecordType() {
        return TestsRecord.class;
    }

    /**
     * The column <code>Tests.test_id</code>.
     */
    public final TableField<TestsRecord, Integer> TEST_ID = createField(DSL.name("test_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Tests.name</code>.
     */
    public final TableField<TestsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Tests.code</code>.
     */
    public final TableField<TestsRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Tests.questions</code>.
     */
    public final TableField<TestsRecord, Integer> QUESTIONS = createField(DSL.name("questions"), SQLDataType.INTEGER.nullable(false), this, "");

    private Tests(Name alias, Table<TestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tests(Name alias, Table<TestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Tests</code> table reference
     */
    public Tests(String alias) {
        this(DSL.name(alias), TESTS);
    }

    /**
     * Create an aliased <code>Tests</code> table reference
     */
    public Tests(Name alias) {
        this(alias, TESTS);
    }

    /**
     * Create a <code>Tests</code> table reference
     */
    public Tests() {
        this(DSL.name("Tests"), null);
    }

    public <O extends Record> Tests(Table<O> child, ForeignKey<O, TestsRecord> key) {
        super(child, key, TESTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TESTS_CODE_UINDEX, Indexes.TESTS_QUESTIONS_UINDEX);
    }

    @Override
    public Identity<TestsRecord, Integer> getIdentity() {
        return (Identity<TestsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestsRecord> getPrimaryKey() {
        return Keys.TESTS__;
    }

    @Override
    public Tests as(String alias) {
        return new Tests(DSL.name(alias), this);
    }

    @Override
    public Tests as(Name alias) {
        return new Tests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tests rename(String name) {
        return new Tests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tests rename(Name name) {
        return new Tests(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
