/*
 * This file is generated by jOOQ.
 */
package domains.tables;


import domains.DefaultSchema;
import domains.Keys;
import domains.tables.records.PositionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Positions extends TableImpl<PositionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Positions</code>
     */
    public static final Positions POSITIONS = new Positions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PositionsRecord> getRecordType() {
        return PositionsRecord.class;
    }

    /**
     * The column <code>Positions.positions_id</code>.
     */
    public final TableField<PositionsRecord, Integer> POSITIONS_ID = createField(DSL.name("positions_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Positions.name</code>.
     */
    public final TableField<PositionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    private Positions(Name alias, Table<PositionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Positions(Name alias, Table<PositionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Positions</code> table reference
     */
    public Positions(String alias) {
        this(DSL.name(alias), POSITIONS);
    }

    /**
     * Create an aliased <code>Positions</code> table reference
     */
    public Positions(Name alias) {
        this(alias, POSITIONS);
    }

    /**
     * Create a <code>Positions</code> table reference
     */
    public Positions() {
        this(DSL.name("Positions"), null);
    }

    public <O extends Record> Positions(Table<O> child, ForeignKey<O, PositionsRecord> key) {
        super(child, key, POSITIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PositionsRecord, Integer> getIdentity() {
        return (Identity<PositionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PositionsRecord> getPrimaryKey() {
        return Keys.POSITIONS__;
    }

    @Override
    public Positions as(String alias) {
        return new Positions(DSL.name(alias), this);
    }

    @Override
    public Positions as(Name alias) {
        return new Positions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(String name) {
        return new Positions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(Name name) {
        return new Positions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
