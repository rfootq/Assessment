/*
 * This file is generated by jOOQ.
 */
package domains.tables;


import domains.DefaultSchema;
import domains.Indexes;
import domains.Keys;
import domains.tables.records.EmployeesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employees extends TableImpl<EmployeesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Employees</code>
     */
    public static final Employees EMPLOYEES = new Employees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeesRecord> getRecordType() {
        return EmployeesRecord.class;
    }

    /**
     * The column <code>Employees.employee_id</code>.
     */
    public final TableField<EmployeesRecord, Integer> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Employees.post</code>.
     */
    public final TableField<EmployeesRecord, Integer> POST = createField(DSL.name("post"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Employees.branch</code>.
     */
    public final TableField<EmployeesRecord, Integer> BRANCH = createField(DSL.name("branch"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Employees.first_name</code>.
     */
    public final TableField<EmployeesRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Employees.last_name</code>.
     */
    public final TableField<EmployeesRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>Employees.service_number</code>.
     */
    public final TableField<EmployeesRecord, String> SERVICE_NUMBER = createField(DSL.name("service_number"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Employees.role</code>.
     */
    public final TableField<EmployeesRecord, Integer> ROLE = createField(DSL.name("role"), SQLDataType.INTEGER.nullable(false), this, "");

    private Employees(Name alias, Table<EmployeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Employees</code> table reference
     */
    public Employees(String alias) {
        this(DSL.name(alias), EMPLOYEES);
    }

    /**
     * Create an aliased <code>Employees</code> table reference
     */
    public Employees(Name alias) {
        this(alias, EMPLOYEES);
    }

    /**
     * Create a <code>Employees</code> table reference
     */
    public Employees() {
        this(DSL.name("Employees"), null);
    }

    public <O extends Record> Employees(Table<O> child, ForeignKey<O, EmployeesRecord> key) {
        super(child, key, EMPLOYEES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EMPLOYEES_BRANCH_UINDEX, Indexes.EMPLOYEES_POST_UINDEX, Indexes.EMPLOYEES_SERVICE_NUMBER_UINDEX);
    }

    @Override
    public Identity<EmployeesRecord, Integer> getIdentity() {
        return (Identity<EmployeesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployeesRecord> getPrimaryKey() {
        return Keys.EMPLOYEES__;
    }

    @Override
    public Employees as(String alias) {
        return new Employees(DSL.name(alias), this);
    }

    @Override
    public Employees as(Name alias) {
        return new Employees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(String name) {
        return new Employees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(Name name) {
        return new Employees(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, String, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
